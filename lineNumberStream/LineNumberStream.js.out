1. const stream = require('stream');
2. const fs = require('fs');
3. const os = require('os');
4. 
5. class LineNumberStream extends stream.Transform {
6. 	
7. 	constructor(options){
8. 		super(options);
9. 		this.isFileBegins = true;
10. 		this.line = 1;
11. 		this.eolRegex = new RegExp(os.EOL,'g');
12. 	}
13. 	
14. 	_transform(chunk, encoding, callback){
15. 		let str = chunk.toString('utf-8');
16. 		
17. 		if(this.isFileBegins) {
18. 			str = `${this.line++}. ${str}`;
19. 			this.isFileBegins = false;
20. 		}
21. 		
22. 		let pieces = str.split(os.EOL);
23. 		
24. 		if(pieces.length === 0){
25. 			return callback(null,Buffer.from(str));
26. 		}
27. 		
28. 		let newStr = pieces.reduce((_newStr,piece,i)=>{
29. 			if(i === 0){
30. 				_newStr = piece;
31. 			} else {
32. 				_newStr = `${_newStr}${os.EOL}${this.line++}. ${piece}`;
33. 			}
34. 			
35. 			return _newStr;
36. 			
37. 		},'');
38. 		
39. 		callback(null,Buffer.from(newStr));
40. 	}
41. }
42. 
43. const s = fs.createReadStream(__filename,{
44. 	encoding: 'utf-8',
45. 	highWaterMark: 10,
46. });
47. 
48. const o = fs.createWriteStream(`${__filename}.out`);
49. s
50. 	.pipe(new LineNumberStream())
51. 	.pipe(o)
52. 	.on('end', ()=>{
53. 		console.log('end');
54. 	})
55. ;
56. 	